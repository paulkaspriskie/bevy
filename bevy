#!/bin/sh
# --------------------
# Global Declarations
# --------------------
# DIR_OUTPUT - Output directory that vim plugins get written to.
# CLI_ARG_CMD_TYPE - Represents command type, init | install | help | prune | upgrade
# CLI_ARG_CMD_OPT - Represents command options.
# FILE_CONFIG - File that contains vim plugin names to be installed.
# TERMINAL_COLOR_GREEN - Success color green that prints/echos in terminal.
# TERMINAL_COLOR_NONE - Default shell color, used to default terminal foreground color.
#
CLI_ARG_CMD_TYPE=$1
CLI_ARG_CMD_OPT=$2
CLI_ARG_CMD_DIR=$3
DIR_OUTPUT=$HOME/.bevy
DIR_VIM_START="$HOME/.bevy/pack/${CLI_ARG_CMD_DIR:-plugins}/start"
DIR_VIM_OPT="$HOME/.bevy/pack/${CLI_ARG_CMD_DIR:-plugins}/opt"
FILE_CONFIG=$HOME/.bevyrc
TERMINAL_COLOR_GREEN='\033[0;32m'
TERMINAL_COLOR_NONE='\033[0m'
CONFIG_PLUGIN_ARRAY=$(sed -n '/^\[.*\]$/,/^$/ { /^[^[]/p }' $FILE_CONFIG)


# --------------------------
# @function util_dir_create
# --------------------------
# @param $1 - respresents a directory name.
# @description - creates directory if one does not exists.
#
util_dir_create() {
  if [ ! -d $1 ]; then
    mkdir -p $1 && echo "${TERMINAL_COLOR_GREEN}Created Directory: $1${TERMINAL_COLOR_NONE}"
  fi
}


# --------------------------
# @function util_dir_update
# --------------------------
# @param $1 - represents a directory path.
# @description - changes directory to one specified by the first argument.
#
util_dir_update() {
  if [ $PWD != $1 ]; then
    cd $1 && echo "${TERMINAL_COLOR_GREEN}Changing Directory: $1${TERMINAL_COLOR_NONE}"
  fi
}


# ---------------------------
# @function util_clone_build
# ---------------------------
# @param $1 - represents git repo name/project.
# @description - dynamically builds git clone specified by first argument.
#
util_clone_build() {
  git clone "https://github.com/$1.git" && echo "${TERMINAL_COLOR_GREEN}Clone Success: $1${TERMINAL_COLOR_NONE}"
}


# ---------------------------
# @function util_file_create
# ---------------------------
# @param $1 - respresents a file name.
# @description - creates file if it does not exists.
#
util_file_create() {
  if [ ! -f $1 ]; then
    touch $1
    echo "${TERMINAL_COLOR_GREEN}Created File: $1${TERMINAL_COLOR_NONE}"
  else
    echo "File: $1 already exists. Skipping creation..."
  fi
}


# ------------------------------
# @function util_get_plugin_dir
# ------------------------------
# @param $1 - represents path to pack directory.
# @param $2 - represents command type, prune or upgrade.
# @description
#
util_get_plugin_dir() {
  find "$1" -type d | while read -r dir; do
    base=$(basename "${dir}")
    if [ "$base" = "start" ] && [ "$2" = "prune" ] || [ "$base" = "opt" ] && [ "$2" = "prune" ]; then
      util_prune_package $dir
    fi
    if [ "$base" = "start" ] && [ "$2" = "upgrade" ] || [ "$base" = "opt" ] && [ "$2" = "upgrade" ]; then
      util_update_package $dir
    fi
  done
}


# ------------------------------
# @function util_prune_package
# ------------------------------
# @param $1 - represents path to pack directory.
# @description
#
util_prune_package() {
  for PLUGIN_DIR_PATH in "$1"/*; do
    if [ -d $PLUGIN_DIR_PATH ]; then
      CONFIG_NAME_EXISTS=false

      for CONFIG_ITEM in $CONFIG_PLUGIN_ARRAY; do

        CONFIG_PLUGIN_NAME="$(basename "${CONFIG_ITEM}")"
        DIR_PLUGIN_NAME=$(basename "${PLUGIN_DIR_PATH}")

        if [ $CONFIG_PLUGIN_NAME = $DIR_PLUGIN_NAME ]; then
          CONFIG_NAME_EXISTS=true
          break
        fi

      done

      if [ "$CONFIG_NAME_EXISTS" = false ]; then
        rm -rf $PLUGIN_DIR_PATH
      fi
    fi
  done
}


# ------------------------------
# @function util_update_package
# ------------------------------
# @param $1 - represents path to plugins directory.
# @description - finds all nested sub-directories within plugins folder (start & opt),
#                then loops through each sub-directory and performs git pull if sub-directory item is a directory.
#
util_update_package() {
  for DIR_PLUGIN in "$1"/*; do
    if [ -d $DIR_PLUGIN ]; then
      cd "$DIR_PLUGIN" && git pull && cd ..
    fi
  done
}


# -----------------------------
# @function util_shell_execute
# -----------------------------
# @param $1 - represents array type, start or opt.
# @param $@ - array containing vim start | opt plugin names.
# @description - creates start or opt directory within .vim/pack/plugins/,
#                changes (cd) into start | opt directories and performs a git clone of each plugin specified within start/opt array.
#
util_shell_execute() {
  TYPE=$1; shift

  for i in "$@"; do
    if [ $TYPE = "start" ]; then
      util_dir_create $DIR_VIM_START && util_dir_update $DIR_VIM_START && util_clone_build $i
    fi
    if [ $TYPE = "opt" ]; then
      util_dir_create $DIR_VIM_OPT && util_dir_update $DIR_VIM_OPT && util_clone_build $i
    fi
  done
}


# ----------------------------------
# @fucntion cli_create_input_prompt
# ----------------------------------
# @description - creates cli prompt, captures input and checks if it meets condition.
#
cli_create_input_prompt() {
  while true; do
    read -p "No .bevyrc file detected in $HOME directory, would you like to create one? [yes/no]: " yn
    case $yn in
      [Yy]*) util_file_create $FILE_CONFIG; break;;
      [Nn]*) exit;;
      *) echo "please answer yes or no.";;
    esac
  done
}


# ------------------------------
# @function cli_input_menu_help
# ------------------------------
# @description - echos help menu including all cli commands.
#
cli_input_menu_help() {
  echo "Bevy: A simple shell/vim plugin installation script manager."
  echo
  echo "Usage:"
  echo "bevy init       creates .bevyrc file and related environment related setup"
  echo "bevy install    installs all scripts specified in .bevyrc"
  echo "bevy upgrade    upgrades all scripts specified in .bevyrc"
}


# -------------------------------------
# @function config_array_filter_assign
# -------------------------------------
# ARRAY_FILTER_TYPE - array of types present in config file.
# ARRAY_TYPE_VIM_START - array of vim plugin names to be installed in ~/.vim/pack/plugins/start.
# ARRAY_TYPE_VIM_OPT - array of vim plugin names to be installed in ~/.vim/pack/plugins/opt.
# @description - filters and assigns plugin names from .bevy file to corresponding start | opt arrays.
#
config_array_filter_assign() {
  ARRAY_FILTER_TYPE=$(sed -n -e '/^\[/p' $FILE_CONFIG | sed 's/[][]//g')

  for i in $ARRAY_FILTER_TYPE; do
    case $i in
      start)
        ARRAY_TYPE_VIM_START=$(sed -n '/\[start\]/,/^$/{//!p;}' $FILE_CONFIG)
        util_shell_execute $i $ARRAY_TYPE_VIM_START
        ;;
      opt)
        ARRAY_TYPE_VIM_OPT=$(sed -n '/\[opt\]/,/^$/{//!p;}' $FILE_CONFIG)
        util_shell_execute $i $ARRAY_TYPE_VIM_OPT
        ;;
    esac
  done
}


# --------------------------
# @function env_process_cli
# --------------------------
# @param $1 - represents command type: init | install | help | prune | upgrade
# @param $2 - represents command option(s)
# @description - case statement that manages cli commands and command options.
#
env_process_cli() {
  case $1 in
    init)
      cli_create_input_prompt
      ;;
    install)
      config_array_filter_assign
      ;;
    help | --help | h)
      cli_input_menu_help
      ;;
    prune)
      util_get_plugin_dir "$HOME/.bevy/pack/" "$1"
      ;;
    upgrade)
      util_get_plugin_dir "$HOME/.bevy/pack/" "$1"
      ;;
  esac
}

env_process_cli $CLI_ARG_CMD_TYPE $CLI_ARG_CMD_OPT
