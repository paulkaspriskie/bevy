#!/bin/sh
# --------------------
# Global Declarations
# --------------------
# DIR_OUTPUT - Output directory that curl | git writes to.
# FILE_CONFIG - File that contains git repos to clone and curl commands to execute.
# TERMINAL_COLOR_GREEN - Success color green that prints/echos in terminal.
# TERMINAL_COLOR_NONE - Default shell color, used to default terminal foreground color.
#
CLI_ARG_CMD_TYPE=$1
CLI_ARG_CMD_OPT=$2
DIR_OUTPUT=$HOME/.bevy
DIR_VIM_START="$HOME/.vim/pack/${CLI_ARG_CMD_TYPE:-plugins}/start"
DIR_VIM_OPT="$HOME/.vim/pack/${CLI_ARG_CMD_TYPE:-plugins}/opt"
FILE_CONFIG=$HOME/.bevyrc
TERMINAL_COLOR_GREEN='\033[0;32m'
TERMINAL_COLOR_NONE='\033[0m'


# --------------------------
# @function util_dir_create
# --------------------------
# @param $1 - respresents a directory name.
# @description - creates directory if one does not exsist.
#
util_dir_create() {
  if [ ! -d $1 ]; then
    mkdir -p $1 && echo "${TERMINAL_COLOR_GREEN}Created Directory: $1${TERMINAL_COLOR_NONE}"
  fi
}


# --------------------------
# @function util_dir_update
# --------------------------
# @param $1 - represents a directory path.
# @description - changes directory to one specified by the first argument.
#
util_dir_update() {
  if [ $PWD != $1 ]; then
    cd $1 && echo "${TERMINAL_COLOR_GREEN}Changing Directory: $1${TERMINAL_COLOR_NONE}"
  fi
}


# ---------------------------
# @function util_clone_build
# ---------------------------
# @param $1 - represents git repo name/project.
# @description - dynamically builds git clone specified by first argument.
#
util_clone_build() {
  git clone "https://github.com/$1.git" && echo "${TERMINAL_COLOR_GREEN}Clone Success: $1${TERMINAL_COLOR_NONE}"
}


# ---------------------------
# @function util_file_create
# ---------------------------
# @param $1 - respresents a file name.
# @description - creates file if it does not exsist.
#
util_file_create() {
  if [ ! -f $1 ]; then
    touch $1
    echo "${TERMINAL_COLOR_GREEN}Created File: $1${TERMINAL_COLOR_NONE}"
  else
    echo "File: $1 already exists. Skipping creation..."
  fi
}


# ------------------------------
# @function util_update_package
# ------------------------------
# @param $1 - path to directory that looped through performs git pull on.
# @description - loops through start/opt directories, cd into sub-directories and performs git pull on each.
#
util_update_package() {
  for SUBDIR in "$1"/*; do
    if [ -d "$SUBDIR" ]; then
      cd "$SUBDIR" && git pull && cd ..
    fi
  done
}


# -----------------------------
# @function util_shell_execute
# -----------------------------
# @param $1 - represents array type. (git or curl)
# @param $@ - array containing git addresses and/or curl commands.
#
util_shell_execute() {
  TYPE=$1; shift

  for i in "$@"; do
    if [ $TYPE = "git" ]; then
      util_dir_create $DIR_OUTPUT && util_dir_update $DIR_OUTPUT && util_clone_build $i
    fi
  done
}


# ----------------------------------
# @fucntion cli_create_input_prompt
# ----------------------------------
# @description - creates cli prompt, captures input and checks if it meets condition.
#
cli_create_input_prompt() {
  while true; do
    read -p "No .bevyrc file detected in $HOME directory, would you like to create one? [yes/no]: " yn
    case $yn in
      [Yy]*) util_file_create $FILE_CONFIG; break;;
      [Nn]*) exit;;
      *) echo "please answer yes or no.";;
    esac
  done
}


# ------------------------------
# @function cli_input_menu_help
# ------------------------------
# @description - echos help menu including all cli commands.
#
cli_input_menu_help() {
  echo "Bevy: A simple shell/vim plugin installation script manager."
  echo
  echo "Usage:"
  echo "bevy init       creates .bevyrc file and related environment related setup"
  echo "bevy install    installs all scripts specified in .bevyrc"
  echo "bevy upgrade    upgrades all scripts specified in .bevyrc"
}


# -------------------------------------
# @function config_array_filter_assign
# -------------------------------------
# ARRAY_FILTER_TYPE - array of types present in config file.
# ARRAY_FILTER_RESULTS_GIT - array that contains git addresses.
# ARRAY_FILTER_RESULTS_CURL - array that contains curl commands.
# @description - filters and assigns git addresses and/or curl commands to corresponding arrays.
#
config_array_filter_assign() {
  ARRAY_FILTER_TYPE=$(sed -n -e '/^\[/p' $FILE_CONFIG | sed 's/[][]//g')

  for i in $ARRAY_FILTER_TYPE; do
    case $i in
      git)
        ARRAY_TYPE_RESULTS_GIT=$(sed -n '/\[git\]/,/^$/{//!p;}' $FILE_CONFIG)
        util_shell_execute $i $ARRAY_TYPE_RESULTS_GIT
        ;;
      curl)
        ARRAY_TYPE_RESULTS_CURL=$(sed -n '/\[curl\]/,/^$/{//!p;}' $FILE_CONFIG)
        util_shell_execute $i $ARRAY_TYPE_RESULTS_CURL
        ;;
    esac
  done
}


# --------------------------
# @function env_process_cli
# --------------------------
# @param $1 - represents command type: init | install | help
# @param $2 - represents command option(s)
# @description - case statement that manages cli commands and command options.
#
env_process_cli() {
  case $1 in
    init)
      cli_create_input_prompt
      ;;
    install)
      config_array_filter_assign
      ;;
    help | --help | h)
      cli_input_menu_help
      ;;
    upgrade)
      util_update_package "$DIR_OUTPUT"
      ;;
  esac
}

env_process_cli $CLI_ARG_CMD_TYPE $CLI_ARG_CMD_OPT
